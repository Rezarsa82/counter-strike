// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Data.proto

#ifndef PROTOBUF_INCLUDED_Data_2eproto
#define PROTOBUF_INCLUDED_Data_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Data_2eproto 

namespace protobuf_Data_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Data_2eproto
namespace GameData {
class GameData;
class GameDataDefaultTypeInternal;
extern GameDataDefaultTypeInternal _GameData_default_instance_;
}  // namespace GameData
namespace google {
namespace protobuf {
template<> ::GameData::GameData* Arena::CreateMaybeMessage<::GameData::GameData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace GameData {

enum GameData_KWeaponType {
  GameData_KWeaponType_heavy = 0,
  GameData_KWeaponType_pistol = 1,
  GameData_KWeaponType_knife = 2,
  GameData_KWeaponType_GameData_KWeaponType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameData_KWeaponType_GameData_KWeaponType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameData_KWeaponType_IsValid(int value);
const GameData_KWeaponType GameData_KWeaponType_KWeaponType_MIN = GameData_KWeaponType_heavy;
const GameData_KWeaponType GameData_KWeaponType_KWeaponType_MAX = GameData_KWeaponType_knife;
const int GameData_KWeaponType_KWeaponType_ARRAYSIZE = GameData_KWeaponType_KWeaponType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameData_KWeaponType_descriptor();
inline const ::std::string& GameData_KWeaponType_Name(GameData_KWeaponType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameData_KWeaponType_descriptor(), value);
}
inline bool GameData_KWeaponType_Parse(
    const ::std::string& name, GameData_KWeaponType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameData_KWeaponType>(
    GameData_KWeaponType_descriptor(), name, value);
}
enum GameData_Access {
  GameData_Access_setting = 0,
  GameData_Access_terrorist = 1,
  GameData_Access_counter_terrorist = 2,
  GameData_Access_all = 3,
  GameData_Access_GameData_Access_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameData_Access_GameData_Access_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameData_Access_IsValid(int value);
const GameData_Access GameData_Access_Access_MIN = GameData_Access_setting;
const GameData_Access GameData_Access_Access_MAX = GameData_Access_all;
const int GameData_Access_Access_ARRAYSIZE = GameData_Access_Access_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameData_Access_descriptor();
inline const ::std::string& GameData_Access_Name(GameData_Access value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameData_Access_descriptor(), value);
}
inline bool GameData_Access_Parse(
    const ::std::string& name, GameData_Access* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameData_Access>(
    GameData_Access_descriptor(), name, value);
}
enum GameData_Team {
  GameData_Team_Terrorist = 0,
  GameData_Team_Counter_Terrorist = 1,
  GameData_Team_GameData_Team_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameData_Team_GameData_Team_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameData_Team_IsValid(int value);
const GameData_Team GameData_Team_Team_MIN = GameData_Team_Terrorist;
const GameData_Team GameData_Team_Team_MAX = GameData_Team_Counter_Terrorist;
const int GameData_Team_Team_ARRAYSIZE = GameData_Team_Team_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameData_Team_descriptor();
inline const ::std::string& GameData_Team_Name(GameData_Team value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameData_Team_descriptor(), value);
}
inline bool GameData_Team_Parse(
    const ::std::string& name, GameData_Team* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameData_Team>(
    GameData_Team_descriptor(), name, value);
}
// ===================================================================

class GameData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameData.GameData) */ {
 public:
  GameData();
  virtual ~GameData();

  GameData(const GameData& from);

  inline GameData& operator=(const GameData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameData(GameData&& from) noexcept
    : GameData() {
    *this = ::std::move(from);
  }

  inline GameData& operator=(GameData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameData* internal_default_instance() {
    return reinterpret_cast<const GameData*>(
               &_GameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameData* other);
  friend void swap(GameData& a, GameData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameData* New() const final {
    return CreateMaybeMessage<GameData>(NULL);
  }

  GameData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameData& from);
  void MergeFrom(const GameData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameData_KWeaponType KWeaponType;
  static const KWeaponType heavy =
    GameData_KWeaponType_heavy;
  static const KWeaponType pistol =
    GameData_KWeaponType_pistol;
  static const KWeaponType knife =
    GameData_KWeaponType_knife;
  static inline bool KWeaponType_IsValid(int value) {
    return GameData_KWeaponType_IsValid(value);
  }
  static const KWeaponType KWeaponType_MIN =
    GameData_KWeaponType_KWeaponType_MIN;
  static const KWeaponType KWeaponType_MAX =
    GameData_KWeaponType_KWeaponType_MAX;
  static const int KWeaponType_ARRAYSIZE =
    GameData_KWeaponType_KWeaponType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  KWeaponType_descriptor() {
    return GameData_KWeaponType_descriptor();
  }
  static inline const ::std::string& KWeaponType_Name(KWeaponType value) {
    return GameData_KWeaponType_Name(value);
  }
  static inline bool KWeaponType_Parse(const ::std::string& name,
      KWeaponType* value) {
    return GameData_KWeaponType_Parse(name, value);
  }

  typedef GameData_Access Access;
  static const Access setting =
    GameData_Access_setting;
  static const Access terrorist =
    GameData_Access_terrorist;
  static const Access counter_terrorist =
    GameData_Access_counter_terrorist;
  static const Access all =
    GameData_Access_all;
  static inline bool Access_IsValid(int value) {
    return GameData_Access_IsValid(value);
  }
  static const Access Access_MIN =
    GameData_Access_Access_MIN;
  static const Access Access_MAX =
    GameData_Access_Access_MAX;
  static const int Access_ARRAYSIZE =
    GameData_Access_Access_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Access_descriptor() {
    return GameData_Access_descriptor();
  }
  static inline const ::std::string& Access_Name(Access value) {
    return GameData_Access_Name(value);
  }
  static inline bool Access_Parse(const ::std::string& name,
      Access* value) {
    return GameData_Access_Parse(name, value);
  }

  typedef GameData_Team Team;
  static const Team Terrorist =
    GameData_Team_Terrorist;
  static const Team Counter_Terrorist =
    GameData_Team_Counter_Terrorist;
  static inline bool Team_IsValid(int value) {
    return GameData_Team_IsValid(value);
  }
  static const Team Team_MIN =
    GameData_Team_Team_MIN;
  static const Team Team_MAX =
    GameData_Team_Team_MAX;
  static const int Team_ARRAYSIZE =
    GameData_Team_Team_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Team_descriptor() {
    return GameData_Team_descriptor();
  }
  static inline const ::std::string& Team_Name(Team value) {
    return GameData_Team_Name(value);
  }
  static inline bool Team_Parse(const ::std::string& name,
      Team* value) {
    return GameData_Team_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameData.GameData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Data_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameData

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace GameData

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GameData::GameData_KWeaponType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameData::GameData_KWeaponType>() {
  return ::GameData::GameData_KWeaponType_descriptor();
}
template <> struct is_proto_enum< ::GameData::GameData_Access> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameData::GameData_Access>() {
  return ::GameData::GameData_Access_descriptor();
}
template <> struct is_proto_enum< ::GameData::GameData_Team> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameData::GameData_Team>() {
  return ::GameData::GameData_Team_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Data_2eproto
